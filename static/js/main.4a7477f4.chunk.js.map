{"version":3,"sources":["App.js","index.js"],"names":["Word","word","validKeys","joinedKeys","join","matched","slice","length","remainder","className","App","useState","typedKeys","setTypedKeys","setValidKeys","setWord","useEffect","index","Math","floor","random","wordList","toLowerCase","getWord","onKeyDown","event","preventDefault","key","prev","MAX_TYPED_KEYS","split","includes","isValidKey","tabIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAiBMA,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACpB,IAAKD,EAAM,OAAO,KAElB,IAAME,EAAaD,EAAUE,KAAK,IAC5BC,EAAUJ,EAAKK,MAAM,EAAGH,EAAWI,QACnCC,EAAYP,EAAKK,MAAMH,EAAWI,QACxC,OACE,qCACE,sBAAME,UAAU,UAAhB,SAA2BJ,IAC3B,sBAAMI,UAAU,YAAhB,SAA6BD,QA6CpBE,EAxCH,WACV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOT,EAAP,KAAkBY,EAAlB,KACA,EAAwBH,mBAAS,IAAjC,mBAAOV,EAAP,KAAac,EAAb,KAEAC,qBAAU,WACRD,EAhCY,WACd,IAAME,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,EAASd,QAElD,OADac,EAASJ,GACVK,cA6BFC,MACP,IAgBH,OACE,sBAAKd,UAAU,YAAYe,UAfP,SAACC,GACrBA,EAAMC,iBACN,IAAQC,EAAQF,EAARE,IACRd,GAAa,SAACe,GAAD,MAAU,sBAAIA,GAAJ,CAAUD,IAAKrB,OAAMuB,OAhC7B,SAACF,EAAK1B,GACvB,QAAKA,GACUA,EAAK6B,MAAM,IAAIC,SAASJ,GAgCjCK,CAAWL,EAAK1B,IAClBa,GAAa,SAACc,GAGZ,OAFsBA,EAAKrB,QAAUN,EAAKM,QACNN,EAAK2B,EAAKrB,UAAYoB,EACzC,sBAAOC,GAAP,CAAaD,IAAOC,MAMYK,SAAS,IAA9D,UACE,qBAAKxB,UAAU,aAAf,SACE,cAAC,EAAD,CAAMR,KAAMA,EAAMC,UAAWA,MAE/B,qBAAKO,UAAU,aAAf,SAA6BG,EAAYA,EAAUR,KAAK,KAAO,OAC/D,qBAAKK,UAAU,kBAAf,SACE,+BACE,uCACA,wCACA,kDC3DVyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.4a7477f4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport wordList from \"./resources/words.json\";\n\nconst MAX_TYPED_KEYS = 30;\n\nconst getWord = () => {\n  const index = Math.floor(Math.random() * wordList.length);\n  const word = wordList[index];\n  return word.toLowerCase();\n};\n\nconst isValidKey = (key, word) => {\n  if (!word) return false;\n  const result = word.split(\"\").includes(key);\n  return result;\n};\n\nconst Word = ({ word, validKeys }) => {\n  if (!word) return null;\n\n  const joinedKeys = validKeys.join(\"\");\n  const matched = word.slice(0, joinedKeys.length);\n  const remainder = word.slice(joinedKeys.length);\n  return (\n    <>\n      <span className=\"matched\">{matched}</span>\n      <span className=\"remainder\">{remainder}</span>\n    </>\n  );\n};\n\nconst App = () => {\n  const [typedKeys, setTypedKeys] = useState([]);\n  const [validKeys, setValidKeys] = useState([]);\n  const [word, setWord] = useState(\"\");\n\n  useEffect(() => {\n    setWord(getWord());\n  }, []);\n\n  const handleKeyDown = (event) => {\n    event.preventDefault();\n    const { key } = event;\n    setTypedKeys((prev) => [...prev, key].slice(MAX_TYPED_KEYS * -1));\n\n    if (isValidKey(key, word)) {\n      setValidKeys((prev) => {\n        const isValidLength = prev.length <= word.length;\n        const isNextChar = isValidLength && word[prev.length] === key;\n        return isNextChar ? [...prev, key] : prev;\n      });\n    }\n  };\n\n  return (\n    <div className=\"container\" onKeyDown={handleKeyDown} tabIndex=\"0\">\n      <div className=\"valid-keys\">\n        <Word word={word} validKeys={validKeys} />\n      </div>\n      <div className=\"typed-keys\">{typedKeys ? typedKeys.join(\" \") : null}</div>\n      <div className=\"completed-words\">\n        <ol>\n          <li>Carro</li>\n          <li>Cidade</li>\n          <li>Arbusto</li>\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}